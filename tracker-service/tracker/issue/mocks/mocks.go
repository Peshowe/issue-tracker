// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Peshowe/issue-tracker/tracker-service/tracker/issue (interfaces: IssueRepository,EventPublisher)

// Package mock_issue is a generated GoMock package.
package mock_issue

import (
	context "context"
	reflect "reflect"

	issue "github.com/Peshowe/issue-tracker/tracker-service/tracker/issue"
	gomock "github.com/golang/mock/gomock"
)

// MockIssueRepository is a mock of IssueRepository interface.
type MockIssueRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIssueRepositoryMockRecorder
}

// MockIssueRepositoryMockRecorder is the mock recorder for MockIssueRepository.
type MockIssueRepositoryMockRecorder struct {
	mock *MockIssueRepository
}

// NewMockIssueRepository creates a new mock instance.
func NewMockIssueRepository(ctrl *gomock.Controller) *MockIssueRepository {
	mock := &MockIssueRepository{ctrl: ctrl}
	mock.recorder = &MockIssueRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIssueRepository) EXPECT() *MockIssueRepositoryMockRecorder {
	return m.recorder
}

// CreateIssue mocks base method.
func (m *MockIssueRepository) CreateIssue(arg0 context.Context, arg1 *issue.Issue) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIssue", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIssue indicates an expected call of CreateIssue.
func (mr *MockIssueRepositoryMockRecorder) CreateIssue(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIssue", reflect.TypeOf((*MockIssueRepository)(nil).CreateIssue), arg0, arg1)
}

// DeleteIssue mocks base method.
func (m *MockIssueRepository) DeleteIssue(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIssue", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIssue indicates an expected call of DeleteIssue.
func (mr *MockIssueRepositoryMockRecorder) DeleteIssue(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIssue", reflect.TypeOf((*MockIssueRepository)(nil).DeleteIssue), arg0, arg1)
}

// GetIssueById mocks base method.
func (m *MockIssueRepository) GetIssueById(arg0 context.Context, arg1 string) (*issue.Issue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssueById", arg0, arg1)
	ret0, _ := ret[0].(*issue.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssueById indicates an expected call of GetIssueById.
func (mr *MockIssueRepositoryMockRecorder) GetIssueById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssueById", reflect.TypeOf((*MockIssueRepository)(nil).GetIssueById), arg0, arg1)
}

// GetIssuesByProject mocks base method.
func (m *MockIssueRepository) GetIssuesByProject(arg0 context.Context, arg1 string) ([]*issue.Issue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssuesByProject", arg0, arg1)
	ret0, _ := ret[0].([]*issue.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssuesByProject indicates an expected call of GetIssuesByProject.
func (mr *MockIssueRepositoryMockRecorder) GetIssuesByProject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssuesByProject", reflect.TypeOf((*MockIssueRepository)(nil).GetIssuesByProject), arg0, arg1)
}

// GetIssuesByUser mocks base method.
func (m *MockIssueRepository) GetIssuesByUser(arg0 context.Context, arg1 string) ([]*issue.Issue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssuesByUser", arg0, arg1)
	ret0, _ := ret[0].([]*issue.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssuesByUser indicates an expected call of GetIssuesByUser.
func (mr *MockIssueRepositoryMockRecorder) GetIssuesByUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssuesByUser", reflect.TypeOf((*MockIssueRepository)(nil).GetIssuesByUser), arg0, arg1)
}

// PutIssue mocks base method.
func (m *MockIssueRepository) PutIssue(arg0 context.Context, arg1 *issue.Issue) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutIssue", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutIssue indicates an expected call of PutIssue.
func (mr *MockIssueRepositoryMockRecorder) PutIssue(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutIssue", reflect.TypeOf((*MockIssueRepository)(nil).PutIssue), arg0, arg1)
}

// MockEventPublisher is a mock of EventPublisher interface.
type MockEventPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockEventPublisherMockRecorder
}

// MockEventPublisherMockRecorder is the mock recorder for MockEventPublisher.
type MockEventPublisherMockRecorder struct {
	mock *MockEventPublisher
}

// NewMockEventPublisher creates a new mock instance.
func NewMockEventPublisher(ctrl *gomock.Controller) *MockEventPublisher {
	mock := &MockEventPublisher{ctrl: ctrl}
	mock.recorder = &MockEventPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventPublisher) EXPECT() *MockEventPublisherMockRecorder {
	return m.recorder
}

// PublishEvent mocks base method.
func (m *MockEventPublisher) PublishEvent(arg0 context.Context, arg1 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishEvent indicates an expected call of PublishEvent.
func (mr *MockEventPublisherMockRecorder) PublishEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishEvent", reflect.TypeOf((*MockEventPublisher)(nil).PublishEvent), arg0, arg1)
}
