// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package project

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProjectServiceClient is the client API for ProjectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectServiceClient interface {
	GetProjectsAll(ctx context.Context, in *ProjectsAllRequest, opts ...grpc.CallOption) (*ProjectsResponse, error)
	GetProjectById(ctx context.Context, in *ProjectByIdRequest, opts ...grpc.CallOption) (*ProjectResponse, error)
	GetProjectsByUser(ctx context.Context, in *ProjectsByUserRequest, opts ...grpc.CallOption) (*ProjectsResponse, error)
	CreateProject(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	DeleteProject(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	AddIssue(ctx context.Context, in *IssueRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	RemoveIssue(ctx context.Context, in *IssueRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	AddUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	RemoveUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*GenericResponse, error)
}

type projectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectServiceClient(cc grpc.ClientConnInterface) ProjectServiceClient {
	return &projectServiceClient{cc}
}

func (c *projectServiceClient) GetProjectsAll(ctx context.Context, in *ProjectsAllRequest, opts ...grpc.CallOption) (*ProjectsResponse, error) {
	out := new(ProjectsResponse)
	err := c.cc.Invoke(ctx, "/project.ProjectService/GetProjectsAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) GetProjectById(ctx context.Context, in *ProjectByIdRequest, opts ...grpc.CallOption) (*ProjectResponse, error) {
	out := new(ProjectResponse)
	err := c.cc.Invoke(ctx, "/project.ProjectService/GetProjectById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) GetProjectsByUser(ctx context.Context, in *ProjectsByUserRequest, opts ...grpc.CallOption) (*ProjectsResponse, error) {
	out := new(ProjectsResponse)
	err := c.cc.Invoke(ctx, "/project.ProjectService/GetProjectsByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) CreateProject(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/project.ProjectService/CreateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) DeleteProject(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/project.ProjectService/DeleteProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) AddIssue(ctx context.Context, in *IssueRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/project.ProjectService/AddIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) RemoveIssue(ctx context.Context, in *IssueRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/project.ProjectService/RemoveIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) AddUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/project.ProjectService/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) RemoveUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/project.ProjectService/RemoveUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectServiceServer is the server API for ProjectService service.
// All implementations must embed UnimplementedProjectServiceServer
// for forward compatibility
type ProjectServiceServer interface {
	GetProjectsAll(context.Context, *ProjectsAllRequest) (*ProjectsResponse, error)
	GetProjectById(context.Context, *ProjectByIdRequest) (*ProjectResponse, error)
	GetProjectsByUser(context.Context, *ProjectsByUserRequest) (*ProjectsResponse, error)
	CreateProject(context.Context, *CreateRequest) (*GenericResponse, error)
	DeleteProject(context.Context, *DeleteRequest) (*GenericResponse, error)
	AddIssue(context.Context, *IssueRequest) (*GenericResponse, error)
	RemoveIssue(context.Context, *IssueRequest) (*GenericResponse, error)
	AddUser(context.Context, *UserRequest) (*GenericResponse, error)
	RemoveUser(context.Context, *UserRequest) (*GenericResponse, error)
	mustEmbedUnimplementedProjectServiceServer()
}

// UnimplementedProjectServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProjectServiceServer struct {
}

func (UnimplementedProjectServiceServer) GetProjectsAll(context.Context, *ProjectsAllRequest) (*ProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectsAll not implemented")
}
func (UnimplementedProjectServiceServer) GetProjectById(context.Context, *ProjectByIdRequest) (*ProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectById not implemented")
}
func (UnimplementedProjectServiceServer) GetProjectsByUser(context.Context, *ProjectsByUserRequest) (*ProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectsByUser not implemented")
}
func (UnimplementedProjectServiceServer) CreateProject(context.Context, *CreateRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (UnimplementedProjectServiceServer) DeleteProject(context.Context, *DeleteRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProject not implemented")
}
func (UnimplementedProjectServiceServer) AddIssue(context.Context, *IssueRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddIssue not implemented")
}
func (UnimplementedProjectServiceServer) RemoveIssue(context.Context, *IssueRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveIssue not implemented")
}
func (UnimplementedProjectServiceServer) AddUser(context.Context, *UserRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedProjectServiceServer) RemoveUser(context.Context, *UserRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUser not implemented")
}
func (UnimplementedProjectServiceServer) mustEmbedUnimplementedProjectServiceServer() {}

// UnsafeProjectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectServiceServer will
// result in compilation errors.
type UnsafeProjectServiceServer interface {
	mustEmbedUnimplementedProjectServiceServer()
}

func RegisterProjectServiceServer(s grpc.ServiceRegistrar, srv ProjectServiceServer) {
	s.RegisterService(&ProjectService_ServiceDesc, srv)
}

func _ProjectService_GetProjectsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectsAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).GetProjectsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.ProjectService/GetProjectsAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).GetProjectsAll(ctx, req.(*ProjectsAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_GetProjectById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).GetProjectById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.ProjectService/GetProjectById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).GetProjectById(ctx, req.(*ProjectByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_GetProjectsByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectsByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).GetProjectsByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.ProjectService/GetProjectsByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).GetProjectsByUser(ctx, req.(*ProjectsByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.ProjectService/CreateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).CreateProject(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_DeleteProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).DeleteProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.ProjectService/DeleteProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).DeleteProject(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_AddIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).AddIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.ProjectService/AddIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).AddIssue(ctx, req.(*IssueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_RemoveIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).RemoveIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.ProjectService/RemoveIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).RemoveIssue(ctx, req.(*IssueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.ProjectService/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).AddUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_RemoveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).RemoveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.ProjectService/RemoveUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).RemoveUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectService_ServiceDesc is the grpc.ServiceDesc for ProjectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "project.ProjectService",
	HandlerType: (*ProjectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProjectsAll",
			Handler:    _ProjectService_GetProjectsAll_Handler,
		},
		{
			MethodName: "GetProjectById",
			Handler:    _ProjectService_GetProjectById_Handler,
		},
		{
			MethodName: "GetProjectsByUser",
			Handler:    _ProjectService_GetProjectsByUser_Handler,
		},
		{
			MethodName: "CreateProject",
			Handler:    _ProjectService_CreateProject_Handler,
		},
		{
			MethodName: "DeleteProject",
			Handler:    _ProjectService_DeleteProject_Handler,
		},
		{
			MethodName: "AddIssue",
			Handler:    _ProjectService_AddIssue_Handler,
		},
		{
			MethodName: "RemoveIssue",
			Handler:    _ProjectService_RemoveIssue_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _ProjectService_AddUser_Handler,
		},
		{
			MethodName: "RemoveUser",
			Handler:    _ProjectService_RemoveUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc-contract/tracker-service/v1/project/project.proto",
}
